# This starter workflow is for a CMake project running on multiple platforms. There is a different starter workflow if you just want a single platform.
# See: https://github.com/actions/starter-workflows/blob/main/ci/cmake-single-platform.yml
name: CMake on multiple platforms

on:
  push:
    branches: [ "add-github-actions" ]
    # branches: [ "main" ]
  pull_request:
    branches: [ "add-github-actions" ]
    # branches: [ "main" ]

jobs:
  build:
    runs-on: ${{ matrix.os }}

    strategy:
      fail-fast: true # false

      matrix:
        os: [ubuntu-22.04, windows-2022]
        build_type: [Debug, Release]
        c_compiler: [gcc, c1] # , clang]
        cmake_generator: [Ninja, Unix Makefiles]
        include:
          - os: windows-2022
            c_compiler: cl
            cpp_compiler: cl
          - os: ubuntu-22.04
            c_compiler: gcc
            cpp_compiler: g++
          # - os: ubuntu-22.04
          #   c_compiler: clang
          #   cpp_compiler: clang++
        exclude:
          - os: windows-2022
            c_compiler: gcc
          # - os: windows-2022
          #   c_compiler: clang
          - os: ubuntu-22.04
            c_compiler: cl

    env:
      SLINT_VERSION: 1.3.2

    steps:
    - name: Checkout sources
      uses: actions/checkout@v4

    # - name: Download Slint (Linux)
    #   if: runner.os == 'Linux'
    #   run: |
    #     wget https://github.com/slint-ui/slint/releases/download/v$SLINT_VERSION/Slint-cpp-$SLINT_VERSION-Linux-x86_64.tar.gz
    #     mkdir $HOME/slint
    #     tar xf Slint-cpp-$SLINT_VERSION-Linux-x86_64.tar.gz -C $HOME/slint --strip-components=1
    #     echo "SLINT_INSTALL_LOCATION=$HOME/slint" >> $GITHUB_ENV

    # - name: Download Slint (Windows)
    #   if: runner.os == 'Windows'
    #   run: |
    #     curl --location --remote-name https://github.com/slint-ui/slint/releases/download/v$env:SLINT_VERSION/Slint-cpp-$env:SLINT_VERSION-win64.exe
    #     & .\Slint-cpp-$env:SLINT_VERSION-win64.exe /S /D=c:\slint
    #     Write-Host "SLINT_INSTALL_LOCATION=c:\slint" >> $env:GITHUB_ENV

    - name: Install dependencies (Linux)
      if: runner.os == 'Linux'
      run: |
        sudo apt update
        sudo apt install ninja-build
        sudo apt install -y \
          libxkbcommon-dev \
          libxcb-xkb-dev \
          libxkbcommon-x11-dev \
          wayland-scanner++ \
          wayland-protocols \
          libwayland-dev \
          libmosquittopp-dev

    - name: Set reusable strings
      # Turn repeated input strings (such as the build output directory) into step outputs. These step outputs can be used throughout the workflow file.
      id: strings
      shell: bash
      run: |
        echo "build-output-dir=${{ github.workspace }}/build" >> "$GITHUB_OUTPUT"

    - name: Configure CMake
      # Configure CMake in a 'build' subdirectory. `CMAKE_BUILD_TYPE` is only required if you are using a single-configuration generator such as make.
      # See https://cmake.org/cmake/help/latest/variable/CMAKE_BUILD_TYPE.html?highlight=cmake_build_type
      run: >
        cmake -B ${{ steps.strings.outputs.build-output-dir }}
        -DCMAKE_CXX_COMPILER=${{ matrix.cpp_compiler }}
        -DCMAKE_C_COMPILER=${{ matrix.c_compiler }}
        -DCMAKE_BUILD_TYPE=${{ matrix.build_type }}
        -G "${{ matrix.cmake_generator }}"
        -S ${{ github.workspace }}

    - name: Build
      # Build your program with the given configuration. Note that --config is needed because the default Windows generator is a multi-config generator (Visual Studio generator).
      run: cmake --build ${{ steps.strings.outputs.build-output-dir }} --config ${{ matrix.build_type }}

    - name: Test
      working-directory: ${{ steps.strings.outputs.build-output-dir }}
      # Execute tests defined by the CMake configuration. Note that --build-config is needed because the default Windows generator is a multi-config generator (Visual Studio generator).
      # See https://cmake.org/cmake/help/latest/manual/ctest.1.html for more detail
      run: ctest --build-config ${{ matrix.build_type }}
